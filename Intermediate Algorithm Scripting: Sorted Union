function uniteUnique(arr) {
  //empty array
  var newArr = [];

  //Loop to find all arguments
  for (var i = 0; i < arguments.length; i++) {
    var arrayArguments = arguments[i];
      // Loops through the array 
      for (var j = 0; j < arrayArguments.length; j++) {
        var indexValue = arrayArguments[j];
        // Checks if the value is already on the final array.
        if (newArr.indexOf(indexValue) < 0) {
          newArr.push(indexValue);
        }
      }
  }
  return newArr;
}

console.log(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]));

/*
//Alternative solution
function uniteUnique(arr) {
  var args = [...arguments];
  var result = [];
  for(var i = 0; i < args.length; i++) {
    for(var j = 0; j < args[i].length; j++) {
       if(!result.includes(args[i][j])) {
        result.push(args[i][j]);
      }
    }
  }
  return result;
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);
*/



/*
//Advanced Solution
//jshint esversion:6

function uniteUnique(...arrays) {

  //make an array out of the given arrays and flatten it (using the spread operator)
  const flatArray = [].concat(...arrays);

  // create a Set which clears any duplicates since it's a regulat set and not a multiset
  return [...new Set(flatArray)];
}

// test here
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);
*/
